-- phpMyAdmin SQL Dump
-- version 4.6.5.2
-- https://www.phpmyadmin.net/
--
-- Počítač: 127.0.0.1
-- Vytvořeno: Čtv 12. čec 2018, 18:14
-- Verze serveru: 10.1.21-MariaDB
-- Verze PHP: 5.6.30

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Databáze: `articles`
--

-- --------------------------------------------------------

--
-- Struktura tabulky `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `title` varchar(250) COLLATE utf8_czech_ci NOT NULL,
  `photo` varchar(250) COLLATE utf8_czech_ci NOT NULL,
  `perex` text COLLATE utf8_czech_ci NOT NULL,
  `text` text COLLATE utf8_czech_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_czech_ci;

--
-- Vypisuji data pro tabulku `article`
--

INSERT INTO `article` (`id`, `title`, `photo`, `perex`, `text`) VALUES
(1, 'Lekce 1 - Úvod do PHP a webových aplikací', 'photo1.png', 'V tutoriálu si vysvětlíme, jaké jsou výhody webových aplikací oproti aplikacím desktopovým a pochopíme, jak PHP na serveru pracuje.', '<p>Vítejte u první lekce kurzu PHP, který je určen pro úplné\r\nzačátečníky. Budeme zde vytvářet jednoduché dynamické webové doplňky,\r\njako např. emailový formulář, anketu nebo knihu návštěv. Ukážeme si\r\ntaké, jak generovat stránky pomocí PHP do připravené šablony. Pokud již\r\nmáte znalosti HTML a CSS, máte výhodu. Pokud ne, budete to mít trochu\r\ntěžší, ale určitě to zvládnete i tak.</p>\r\n\r\n<p>PHP se v čase velmi vyvíjí a mění. Tento tutoriál je moderní a je\r\npsán tak, aby vás naučil programovat správně a bezpečně. Také vás\r\npřipraví na další seriály, které se věnují pokročilejšímu objektově\r\norientovanému programování nebo MVC architektuře.</p>\r\n\r\n<p>Než začneme se samotným programováním, udělejme si obecný úvod do\r\nwebových aplikací. Když máme s PHP pracovat, měli bychom vědět jak\r\nfunguje.</p>\r\n\r\n<h2>Výhody webových aplikací</h2>\r\n\r\n<p>Není náhoda, že se většina dnešních aplikací píše pro web. Je to z\r\ntoho důvodu, že webové aplikace mají oproti klasickým (desktopovým) mnoho\r\nvýhod a jejich vývoj je výhodnější a také vydělají obvykle více peněz\r\nnebo přitáhnou více uživatelů.</p>\r\n\r\n<p>Abychom tyto výhody a principy pochopili, udělejme si krátkou odbočku do\r\nhistorie a vysvětleme si, co ke vzniku webových aplikací vůbec vedlo.</p>\r\n\r\n<h3>Mainframy</h3>\r\n\r\n<p>Když se počítače poprvé dostávaly mezi lidi a do firem, byly velmi\r\ndrahé. Bylo nepředstavitelné, že by měl každý zaměstnanec svůj\r\npočítač. Z toho důvodu se zakoupil jeden centrální počítač (který byl\r\nna tu dobu velmi výkonný) a k tomuto centrálnímu počítači se jednoduše\r\nřečeno připojilo několik klávesnic a monitorů. Všichni zaměstnanci\r\npracovali současně na tomto jednom počítači, který je obsluhoval.</p>\r\n\r\n<p>Kdyby se tedy např. jednalo o kancelářskou aplikaci Word, každý\r\nuživatel by měl na mainframe nějakou svou složku s dokumenty a všichni by\r\npracovali s tím jedním Wordem, který je na mainframu nainstalovaný.</p>\r\n\r\n<p>Výhody této architektury jsou následující:</p>\r\n\r\n<ul>\r\n	<li><strong>Snadná správa</strong> - Aby mohli uživatelé používat nějakou\r\n	aplikaci, stačí tu aplikaci nahrát na mainframe. V tu chvíli je přístupná\r\n	všem uživatelům. To samé platí pro aktualizaci, aktualizujeme mainframe a\r\n	všichni již používají novou verzi aplikace.</li>\r\n\r\n	<li><strong>Vysoká bezpečnost</strong> - Všechna data jsou uložena v\r\n	databázi na mainframu, nikoli na stanicích zaměstnanců. To samé platí o\r\n	samotných aplikacích, k jejich kódu se nikdo nedostane.</li>\r\n</ul>\r\n\r\n<p>Máme tu samozřejmě i nevýhody:</p>\r\n\r\n<ul>\r\n	<li><strong>Nízký výkon a vysoká cena</strong> - Mainframe vyžaduje vysoký\r\n	výkon a zpracovává úplně všechny úlohy aplikace. Jeho provoz je\r\n	nákladný.</li>\r\n</ul>\r\n\r\n<p>Mainframy se již téměř nepoužívají, ale dodnes ještě v některých\r\npodnicích fungují.</p>\r\n\r\n<h3>Desktopové aplikace</h3>\r\n\r\n<p>Jak se počítače začaly rozšiřovat mezi menší firmy a potom dokonce i\r\ndo domácností, začala samozřejmě klesat jejich cena. Osobní počítač si\r\njiž mohl dovolit každý. Mainframům odzvonilo a nebyl důvod, aby každý\r\nzaměstnanec nebo obecně uživatel neměl svojí aplikaci ve svém\r\npočítači.</p>\r\n\r\n<p>Když opět použijeme náš příklad s Wordem, zde má každý uživatel\r\nsvé dokumenty a svůj Word ve svém počítači (desktopu).</p>\r\n\r\n<p>Výhody desktopových aplikací:</p>\r\n\r\n<ul>\r\n	<li><strong>Vysoký výkon</strong> - Veškerý výkon aplikace zajišťuje\r\n	klientský počítač. Někdy v tomto případě hovoříme o tzv. tlustém\r\n	klientovi. Tehdy aplikace komunikuje se serverem, který se stará jen o\r\n	zasílání dat a neřeší např. vykreslování formulářů, což za něj\r\n	dělá právě aplikace.</li>\r\n</ul>\r\n\r\n<p>Nevýhody:</p>\r\n\r\n<ul>\r\n	<li><strong>Složitá správa</strong> - Pokud vydáme novou verzi naší\r\n	aplikace, musíme zajistit, aby si každý klient aktualizoval svůj počítač.\r\n	To se nám samozřejmě nepodaří a proto řešíme problémy se starými\r\n	verzemi. Instalace a stahování aplikací je pro uživatele otravná.</li>\r\n\r\n	<li><strong>Nízká bezpečnost</strong> - Jelikož je u klienta přítomná\r\n	celá aplikace, může se ji snažit disassemblovat (hackovat), což není u\r\n	dnešních vysokých jazyků příliš velký problém. Může nám z aplikace\r\n	ukrást části zdrojových kódů nebo nějaká data.</li>\r\n</ul>\r\n\r\n<h3>Webové stránky</h3>\r\n\r\n<p>S rozšířením internetu nejprve vzniklo obrovské množství statických\r\nwebových stránek. Určitě jste si nějaké webové stránky někdy zkusili\r\nvytvořit, jedná se o textový soubor, kde pomocí značek označíte určitou\r\nčást jako nadpis, odstavec, obrázek a podobně. Výsledná stránka je (jak\r\njiž bylo řečeno) statická. Nemůže se tedy měnit, je to pouze\r\nelektronický dokument, který můžeme jen číst.</p>\r\n\r\n<p>HTML stránky (HTML je značkovací jazyk) jsou jednoduše uložené na\r\nserveru. Jakmile klient (uživatel s webovým prohlížečem) pošle požadavek\r\nna server, server mu jednoduše vrátí přesně tu stránku, co má uloženou.\r\nTéto architektuře se říká klient-server.</p>\r\n\r\n<p>Určitě jste si všimli, že se architektura nápadně podobá mainframu.\r\nVracíme se tedy ke kořenům a získáváme následující výhody:</p>\r\n\r\n<ul>\r\n	<li><strong>Malá zátěž</strong> - Server pouze zasílá HTML stránky a již\r\n	neřeší jejich zobrazení, ovládání klávesnice uživatele, jeho monitoru a\r\n	podobně. To vše se děje na klientském počítači.</li>\r\n\r\n	<li><strong>Snadná správa</strong> - Jakmile změníme obsah na serveru\r\n	(např. přidáme nějaký dokument), uvidí ho tam okamžitě všichni\r\n	uživatelé.</li>\r\n\r\n	<li><strong>Vysoká bezpečnost</strong> - Pokud chceme zakázat přístup k\r\n	nějakým dokumentům, klient se k nim prostě nemá jak dostat, jelikož jsou\r\n	na serveru.</li>\r\n</ul>\r\n\r\n<p>Nevýhodou je samozřejmě to, že server umí zasílat <strong>jen statické\r\nHTML stránky</strong>. Není způsob, jak serveru odeslat nějaká data a na\r\njejich základě dostat výstup (třeba nechat na stránce vzkaz v diskuzi,\r\nhlasovat v anketě nebo zobrazit ve stránce kdo má dnes svátek).</p>\r\n\r\n<h3>Webové aplikace</h3>\r\n\r\n<p>Po obrovském rozmachu internetu a webových stránek se hledaly způsoby,\r\njak do stránek přidávat nějakou dynamickou funkčnost. Tyto pokusy došly\r\npostupem času tak daleko, že v dnešní době jsme schopni dosáhnout toho,\r\naby se webová stránka chovala úplně stejně, jako desktopová aplikace\r\n(třeba MS Word z desktopu je na webu dostupný jako Office 365 nebo např.\r\npřes Google Docs). Takové webové stránce se říká <strong>webová\r\naplikace</strong>.</p>\r\n\r\n<p>Webové aplikace fungují tak, že se klient zeptá serveru na určitý\r\ndokument. Na serveru ale běží tzv. CGI skript, což je program, který\r\ndokáže vygenerovat do stránky to, co uživatel požaduje. Stránka tedy na\r\nserveru již neleží, ale je dynamicky vytvářena podle toho, co uživatel\r\nchce. Právě PHP je nejpoužívanějším CGI skriptovacím jazykem, ve kterém\r\nse webové aplikace píší.</p>\r\n\r\n<p>Často je scénář následující:</p>\r\n\r\n<ol>\r\n	<li>Uživatel vyťuká do prohlížeče URL adresu (třeba\r\n	eshop.cz/tiskarna-epson-123) a tím pošle požadavek serveru</li>\r\n\r\n	<li>Server zavolá PHP modul</li>\r\n\r\n	<li>PHP modul zpracuje požadavek (zde chce uživatel vypsat informace o\r\n	tiskárně). Připojí se k databázi a načte data, která chce klient. Na\r\n	základě dat vygeneruje webovou HTML stránku.</li>\r\n\r\n	<li>Hotová stránka je zaslána klientovi. Ten vidí již jen statickou webovou\r\n	stránku, která však byla dynamicky vytvořená podle jeho požadavku.</li>\r\n</ol>\r\n\r\n<p>Všechna data jsou v databázi a webová aplikace, zde v příkladu nějaký\r\neshop s IT, má rozhraní, přes které může personál jednoduše přidávat\r\nnové produkty, upravovat jejich cenu a podobně. Je vám asi jasné, že kdyby\r\ndata nebyla v databázi, ale každý produkt měl svou statickou HTML stránku,\r\ntak by bylo extrémně obtížné takovou spoustu stránek spravovat. Navíc by\r\nse potom nedalo pomocí skriptu třeba hledat podle ceny, psát k produktům\r\nkomentáře a podobně.</p>\r\n\r\n<p>Právě jsme si tedy popsali princip dynamického webu a také jeho\r\npříklad. Jaké jsou tedy výhody webových aplikací?</p>\r\n\r\n<ul>\r\n	<li><strong>Snadná správa</strong> - Novou verzi aplikace nahrajeme a v tom\r\n	okamžiku ji používají úplně všichni.</li>\r\n\r\n	<li><strong>Vysoká bezpečnost</strong> - Web i databáze jsou na serveru a\r\n	pokud neobsahuje nějaké bezpečnostní chyby, je velmi nesnadné aplikaci\r\n	ukradnout.</li>\r\n\r\n	<li><strong>Vysoká uživatelská základna</strong> - Lidé jsou líní\r\n	stahovat a instalovat. U webové aplikace jen kliknou na odkaz a již s ní\r\n	pracují. Uživatelů, kteří by používali tu samou aplikaci, kdyby byla na\r\n	desktopu místo na webu, by bylo podstatně méně. A právě kvůli\r\n	uživatelům aplikace přeci píšeme. Ať jsou zadarmo nebo jsou placené,\r\n	vždy chceme, aby je používalo co nejvíce lidí. Toto je hlavní důvod,\r\n	proč se v poslední době dělá v podstatě veškerý software webový.</li>\r\n\r\n	<li><strong>Vysoká kompatibilita</strong> - Jelikož na web přistupujeme přes\r\n	webový prohlížeč, vůbec nás nezajímá operační systém klienta, naše\r\n	aplikace funguje prakticky všude, dokonce i na mobilu.</li>\r\n\r\n	<li>Přetrvávají také výhody klientského počítače, tedy že server není\r\n	zatěžován např. vlastním zobrazováním stránek, to dělá webový\r\n	prohlížeč.</li>\r\n</ul>\r\n\r\n<p>Je vidět, že webové aplikace jsou budoucnost. A kdo je umí, ten se bude\r\nmít dobře.</p>\r\n\r\n<p>Jejich asi jedinou nevýhodou je, že jejich vývoj je o něco\r\nnáročnější, než u aplikací desktopových. Je to z toho důvodu, že web\r\nbyl zprvu navržen pro statické dokumenty a existují určitá omezení, která\r\nse musí obcházet. Nicméně technologie se stále vyvíjejí a mnoho věcí\r\njde oproti minulosti již podstatně snadněji. Mohou za to zejména nové\r\nstandardy HTML 5 a CSS 3.</p>\r\n\r\n<p>Složitější webové aplikace jsou většinou ještě doplněny dalším\r\nprogramovacím jazykem - JavaScriptem. Ten běží v klientském počítači a\r\nzpracovává vizuální část aplikace. Zde na ITnetworku je v JavaScriptu\r\nnaprogramované např. navigační menu. JavaScript slouží spíše pro takové\r\ndoplňky v uživatelském rozhraní a je podstatný až u složitých webových\r\naplikací.</p>'),
(2, 'Lekce 2 - Proměnné a typový systém v PHP', 'photo1.png', 'V tutoriálu o základech programování webových aplikací v PHP si vysvětlíme používání proměnných a jak funguje dynamický typový systém.', '<p>V dnešním PHP tutoriálu si ukážeme\r\nzáklady syntaxe a práci s proměnnými.</p>\r\n\r\n<h2>Echo</h2>\r\n\r\n<p>Zrekapitulujme si ještě příklad z minula, který měl následující\r\npodobu:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div>\r\n\r\n<p>Již víme, že PHP skript vypadá jako běžná HTML stránka. Jelikož má\r\nvšak stránka příponu .php, může obsahovat části označené značkami\r\n(direktivou) &lt;?php a ?&gt;. Zde se může nacházet kód, který na serveru\r\nspustí PHP modul. Na toto místo potom vloží výsledek, který kód\r\nvygeneroval.</p>\r\n\r\n<p>Příkaz echo do stránky vypíše zadaný text. Echo je\r\n<strong>funkce</strong> a za název každé funkce píšeme závorky, do\r\nkterých vložíme její vstupní parametry. V echu je parametrem text, který\r\nse má vypsat. I kdyby funkce nepotřebovala ke své úloze žádný parametr,\r\nmusíme tam napsat závorky, v tom případě prázdné. PHP je na funkcích\r\nzaložené a nabízí jich poměrně hodně. Většinu věcí si nemusíme\r\nprogramovat sami, ale prostě zavoláme PHP funkci, která je vykoná. Namísto\r\nfunkcí se dají používat i objekty, se kterými se zatím zatěžovat\r\nnebudeme, ale složitější aplikace bez nich prakticky nelze vytvořit. Na\r\ntento seriál navazuje několik dalších, které potom tyto pokročilejší\r\ntechniky vysvětlují.</p>\r\n\r\n<p><em>Pozn.: Zrovna u funkce echo lze závorky vynechat, ale u většiny\r\njiných funkcí to nelze. Přijde mi přehlednější psát je všude, než je\r\nněkde mít a někde nemít.</em></p>\r\n\r\n<p>Funkci echo() předáváme v parametru text. V programování se textu\r\nříká <strong>textový řetězec</strong>, anglicky <strong>string</strong>.\r\nTextové řetězce píšeme do uvozovek, ať už jednoduchých nebo dvojitých.\r\nJe to z toho důvodu, aby si PHP text nepletlo s ostatními příkazy. Když\r\ntedy napíšeme např.:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"e1eaeabac3eb0b5ac489a4104fd49c966dda8b7ec7c2fed8ef0ededa600f5c50\"><div class=\"sjs sjs-tab-control\" style=\"height: 31px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"echo\"</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\necho(\"echo\");\r\n{/PHP}</pre></div></div>\r\n\r\n<p>PHP ví, že je to druhé echo jen text a nebude si ho všímat (vypíše\r\nprostě text echo). Za každým příkazem vždy následuje středník.\r\nPříkazy píšeme na samostatné řádky. Syntaxe PHP vychází z céčka, ve\r\nkterém je PHP mimochodem naprogramované. Je samozřejmě podobná i dalším\r\njazykům, co z céčka vycházejí, např. Javě nebo C# .NET. Pokud tyto jazyky\r\nznáte, budete mít výhodu. Pokud ne, vše si zde vysvětlíme od\r\nzačátku.</p>\r\n\r\n<p>Ve stránce, kterou vidí uživatel, již není po PHP ani památky. Obsahuje\r\njen to, co PHP vygenerovalo. Uživatel se tedy ke zdrojovému kódu v PHP nikdy\r\nnedostane. HTML stránka, kterou vygeneroval skript výše, vypadá takto:</p>\r\n\r\n<pre class=\"html\"><span class=\"html-tag\">&lt;!DOCTYPE</span><span class=\"html-tagin\"> html</span><span class=\"html-tag\">&gt;</span>\r\n<span class=\"html-tag\">&lt;html&gt;</span>\r\n    <span class=\"html-tag\">&lt;head&gt;</span>\r\n        <span class=\"html-tag\">&lt;meta</span><span class=\"html-tagin\"> http-equiv=</span><span class=\"html-quote\">\"Content-Type\"</span><span class=\"html-tagin\"> content=</span><span class=\"html-quote\">\"text/html; charset=UTF-8\"</span><span class=\"html-tag\">&gt;</span>\r\n        <span class=\"html-tag\">&lt;title&gt;&lt;/title&gt;</span>\r\n    <span class=\"html-tag\">&lt;/head&gt;</span>\r\n    <span class=\"html-tag\">&lt;body&gt;</span>\r\n            Tento text do stránky vložilo PHP\r\n    <span class=\"html-tag\">&lt;/body&gt;</span>\r\n<span class=\"html-tag\">&lt;/html&gt;</span></pre>\r\n\r\n<p>PHP tedy HTML nijak nenahrazuje, je to pouze prostředek k jeho generování.\r\nObvykle máme nějakou HTML kostru, do které dynamicky vkládáme obsah, který\r\nnení předem známý a který se mění (např. komentáře v knize\r\nnávštěv). Obsah se často načítá z nějaké databáze.</p>\r\n\r\n<p>Příklad výše bychom však dokázali udělat i bez PHP, že? Poďme do\r\nskriptu vložit nějakou dynamickou funkčnost.</p>\r\n\r\n<h2>Proměnné</h2>\r\n\r\n<p>Slovo proměnná byste měli znát ze školy. Pro neprogramátory je to\r\nmísto v paměti, kam si můžeme ukládat data a potom s nimi pracovat.\r\nProměnné pojmenováváme libovolným názvem bez mezer a diakritiky. Před\r\njejich název píšeme vždy dolar ($).</p>\r\n\r\n<p>Uvnitř PHP části stránky si vytvoříme několik proměnných a naplníme\r\nje různými hodnotami:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$pozdrav</span> = <span class=\"php-quote\">\"Ahoj\"</span>;\r\n<span class=\"php-var\">$vek</span> = <span class=\"php-num\">15</span>;\r\n<span class=\"php-var\">$pi</span> = <span class=\"php-num\">3.14</span>;</pre>\r\n\r\n<p>Všimněte si, že se proměnné vždy jmenují podle toho, co je v nich\r\nuloženo. Není nic horšího, než uložit např. věk do proměnné $a,\r\npozdrav do $b a podobně. Ve svých skriptech byste se za chvíli nevyznali.\r\nNaopak pokud máte 2 čísla a pojmenujete je $a a $b, je to v pořádku. Obsah\r\nnějaké proměnné můžeme samozřejmě jednoduše vypsat pomocí funkce echo.\r\nUpravme náš kód:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"09bc630dd83a86286af4e5dc12c21d54c536cc28a8c123fec783bd0274ad69c9\"><div class=\"sjs sjs-tab-control\" style=\"height: 167px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$pozdrav</span> = <span class=\"php-quote\">\"Ahoj\"</span>;\r\n<span class=\"php-var\">$vek</span> = <span class=\"php-num\">15</span>;\r\n<span class=\"php-var\">$pi</span> = <span class=\"php-num\">3.14</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$pozdrav</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$vek</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$pi</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;\'</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$pozdrav = \"Ahoj\";\r\n$vek = 15;\r\n$pi = 3.14;\r\necho($pozdrav);\r\necho(\'&lt;br /&gt;\');\r\necho($vek);\r\necho(\'&lt;br /&gt;\');\r\necho($pi);\r\necho(\'&lt;br /&gt;\');\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Měli byste vidět následující výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost/Hello&shy;World</div>\r\n\r\n	<iframe srcdoc=\"Ahoj<br />\r\n15<br />\r\n3.14<br />\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Určitě jste si všimli, že do uvozovek dáváme pouze text, čísla a\r\nproměnné píšeme tak, jak jsou.</p>\r\n\r\n<h3>Datové typy</h3>\r\n\r\n<p>Každá proměnná je určitého typu, těmto typům se říká datové. Ve\r\nskriptu jsme si vytvořili proměnné třech základních datových typů.\r\nPozdrav je typu <strong>string</strong>, o tom jsme si již říkali. $vek je\r\ntypu <strong>int</strong>, což je celé číslo. $pi je potom typu\r\n<strong>double</strong> (někdy můžete narazit i na typ float, v PHP\r\noznačují oba typy to samé, tedy desetinné číslo).</p>\r\n\r\n<p>PHP je tzv. dynamicky typovaný jazyk. To znamená, že datové typy\r\nnemusíme u proměnných zadávat (jako třeba v jazyce C), ale PHP si typ podle\r\nobsahu proměnné nastaví samo. Mezi typy také PHP samo převádí. Teoreticky\r\nnemusíme ani vědět o tom, že proměnná nějaký datový typ má, prakticky\r\nbychom se však někdy mohli docela divit, když by PHP samo převedlo něco\r\ntak, jak jsme to nečekali.</p>\r\n\r\n<h2>Sčítání čísel a spojování řetězců</h2>\r\n\r\n<p>V PHP můžeme mezi čísly samozřejmě používat základní početní\r\noperace, kulaté závorky a ostatní proměnné:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"975ed7616ce3727379a7c808ba4120981e0e4d0d5d8c6aadb412d79c9607d68d\"><div class=\"sjs sjs-tab-control\" style=\"height: 65px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$r</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$obsah</span> = <span class=\"php-num\">3.14</span> * <span class=\"php-var\">$r</span> * <span class=\"php-var\">$r</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Obsah kruhu je </span><span class=\"php-var\">$obsah</span><span class=\"php-quote\"> cm&lt;sup&gt;2&lt;/sup&gt;\"</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$r = 10;\r\n$obsah = 3.14 * $r * $r;\r\necho(\"Obsah kruhu je $obsah cm&lt;sup&gt;2&lt;/sup&gt;\");\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Obsah kruhu je 314 cm<sup>2</sup>\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Kód výše vytvoří proměnnou $r s hodnotou 10. Tato hodnota se využije\r\npři zadávání obsahu proměnné $obsah. Proměnná $obsah se vypíše spolu s\r\ndalším textem funkcí echo.</p>\r\n\r\n<p>Vidíte, že do řetězce můžeme jednoduše vložit i obsah proměnné.\r\nFunguje to však pouze s dvojitými uvozovkami, s jednoduchými by se vypsal\r\nřetězec tak, jak je napsaný a proměnná by se do něj nevložila. Horního\r\nindexu u čtverečních centimetrů jsme dosáhli pomocí HTML tagu\r\n<code>&lt;sup&gt;</code>. Poloměr by se v reálné aplikaci samozřejmě zadal\r\nnějakým formulářem, aby měla aplikace nějaký význam. To ale zatím\r\nneumíme.</p>\r\n\r\n<p>Již jsme si říkali, že PHP samo převádí mezi různými datovými typy.\r\nVyzkoušejme si to:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"c398081865401d317b4b7c295822f4beaa59522511316c5817a27372b363e437\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$b</span> = <span class=\"php-quote\">\"20\"</span>;\r\n<span class=\"php-var\">$c</span> = <span class=\"php-var\">$a</span> + <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$c</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 10;\r\n$b = \"20\";\r\n$c = $a + $b;\r\necho($c);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstupem bude:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"30\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Ačkoli je proměnná $b zadána jako text, PHP ji převede na číslo\r\njakmile zjistí, že jí chceme k něčemu přičíst. Stejného výsledku\r\nbychom dokonce dosáhli i s tímto zadáním:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"2eb0e9f938f06c97c41617f9798d2c03785109557689489594f5054328d42fbd\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$b</span> = <span class=\"php-quote\">\"20 let mi je\"</span>;\r\n<span class=\"php-var\">$c</span> = <span class=\"php-var\">$a</span> + <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$c</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 10;\r\n$b = \"20 let mi je\";\r\n$c = $a + $b;\r\necho($c);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>To už je trochu divoké a rozhodně to nebudeme dělat.</p>\r\n\r\n<p>Stejně, jako můžeme sčítat čísla, můžeme spojovat textové\r\nřetězce. Cizím slovem se tomu říká konkatenace (anglicky concatenation\r\nnebo zkráceně concat). Slouží k tomu operátor tečka (.):</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"77c49705a1ba4216e008f13124dfbbcbc59176cad75b74deeae33ba8da38a271\"><div class=\"sjs sjs-tab-control\" style=\"height: 218px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$b</span> = <span class=\"php-num\">20</span>;\r\n<span class=\"php-var\">$veta</span> = <span class=\"php-quote\">\"Ahoj, je mi\"</span>;\r\n\r\n<span class=\"php-var\">$soucet</span> = <span class=\"php-var\">$a</span> + <span class=\"php-var\">$b</span>;\r\n<span class=\"php-var\">$spojeni</span> = <span class=\"php-var\">$a</span> . <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Zde je součet čísel A a B: </span><span class=\"php-var\">$soucet</span><span class=\"php-quote\">\"</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Zde je spojení řetězců A a B: </span><span class=\"php-var\">$spojeni</span><span class=\"php-quote\">\"</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'A ještě jeden příklad: \'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$veta</span> . <span class=\"php-quote\">\" \"</span> . <span class=\"php-var\">$b</span> . <span class=\"php-quote\">\" let.\"</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 10;\r\n$b = 20;\r\n$veta = \"Ahoj, je mi\";\r\n\r\n$soucet = $a + $b;\r\n$spojeni = $a . $b;\r\necho(\"Zde je součet čísel A a B: $soucet\");\r\necho(\'&lt;br /&gt;\');\r\necho(\"Zde je spojení řetězců A a B: $spojeni\");\r\necho(\'&lt;br /&gt;\');\r\necho(\'A ještě jeden příklad: \');\r\necho($veta . \" \" . $b . \" let.\");\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Zde je součet čísel A a B: 30<br />\r\nZde je spojení řetězců A a B: 1020<br />\r\nA ještě jeden příklad: Ahoj, je mi 20 let.\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Z výstupu programu vidíme rozdíl mezi sčítáním čísel a spojováním\r\nřetězců. Všimněte si, že jsme stále v HTML, pokud chceme nový řádek,\r\nvložíme do stránky prostě HTML tag pro odřádkování.</p>');
INSERT INTO `article` (`id`, `title`, `photo`, `perex`, `text`) VALUES
(3, 'Lekce 3 - Textové řetězce podruhé a pole v PHP', 'photo1.png', 'V tutoriálu si ukážeme různé zápisy textových řetězců a vysvětlíme si pojem escapování. Dále si představíme datovou strukturu pole.', '<p>V minulé lekci jsme si vysvětlili základy práce s\r\nproměnnými. Dnes s nimi budeme v PHP tutoriálu pokračovat a představíme si\r\npole.</p>\r\n\r\n<h2>Zápisy řetězců a escapování</h2>\r\n\r\n<p>V minulém dílu jsme si ukazovali, jak zapisovat textové řetězce. Víme,\r\nže je můžeme psát do apostrofů nebo uvozovek. Abychom mohli stavět na\r\nnějakých základech, vysvětleme si rozdíly v těchto dvou zápisech.</p>\r\n\r\n<h3>Apostrofy</h3>\r\n\r\n<p>Pokud napíšeme textový řetězec do apostrofů (jednoduchých uvozovek),\r\nvloží se do něj přesně ten text, který je uveden:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"919f785e747a140d3c10e8cd010d59dd070accbfa06693b1b3cc5b2baf42257a\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$jmeno</span> = <span class=\"php-quote\">\'Karel\'</span>;\r\n<span class=\"php-var\">$text</span> = <span class=\"php-quote\">\'Jmenuji se $jmeno \\n S tímto \"jménem\" jsem spokojen.\'</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$text</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$jmeno = \'Karel\';\r\n$text = \'Jmenuji se $jmeno \\n S tímto \"jménem\" jsem spokojen.\';\r\necho($text);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Jmenuji se $jmeno \\n S tímto &quot;jménem&quot; jsem spokojen.\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Vidíme, že si PHP vůbec nevšímá znaku dolaru, dvojitých uvozovek ani\r\nzpětného lomítka (to si vysvětlíme dále).</p>\r\n\r\n<p>Pokud chceme do řetězce v apostrofech vložit obsah nějaké proměnné,\r\nnemáme jinou možnost, než použít operátor tečky:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"712ee59d6d70701b198bf560cc33753f748efb1118c824b2d3592b1bdae1aa4f\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$jmeno</span> = <span class=\"php-quote\">\'Karel\'</span>;\r\n<span class=\"php-var\">$text</span> = <span class=\"php-quote\">\'Jmenuji se \'</span> . <span class=\"php-var\">$jmeno</span> . <span class=\"php-quote\">\' \\n S tímto \"jménem\" jsem spokojen.\'</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$text</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$jmeno = \'Karel\';\r\n$text = \'Jmenuji se \' . $jmeno . \' \\n S tímto \"jménem\" jsem spokojen.\';\r\necho($text);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výhodu možnosti vložení dvojitých uvozovek do apostrofů pocítíme ve\r\nchvíli, kdy vypisujeme nějaké HTML. V něm se totiž používají dvojité\r\nuvozovky pro zápis atributů:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"b9a78128df2a14ec2525de564f58f6c2a8b47ff9da41847c7b5c1a080cf049ed\"><div class=\"sjs sjs-tab-control\" style=\"height: 48px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'PHP se učím z tutoriálů na &lt;a href=\"http://www.itnetwork.cz\"&gt;ITnetwork&lt;/a&gt;.\'</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\necho(\'PHP se učím z tutoriálů na &lt;a href=\"http://www.itnetwork.cz\"&gt;ITnetwork&lt;/a&gt;.\');\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Pokud bychom chtěli do textu vložit apostrof, musíme ho tzv. odescapovat,\r\naby si ho PHP nespletlo s ukončením řetězce. Escapování provedeme pomocí\r\nzpětného lomítka:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"5f2c25eb24930aae4de0dab6f41b387524075358c36ed6145225f9af94bb8696\"><div class=\"sjs sjs-tab-control\" style=\"height: 65px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$text</span> = <span class=\"php-quote\">\'Chvilku mi trvalo, než jsem na klávesnici našel znaky \", \\\' a ;\'</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$text</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$text = \'Chvilku mi trvalo, než jsem na klávesnici našel znaky \", \\\' a ;\';\r\necho($text);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>V proměnné je nyní uloženo:</p>\r\n\r\n<pre class=\"\">Chvilku mi trvalo, než jsem na klávesnici našel znaky \", \' a ;</pre>\r\n\r\n<h3>Uvozovky</h3>\r\n\r\n<p>Ukažme si nyní, k čemu se hodí uvozovky. Uvozovky jsou v PHP chytřejší\r\napostrofy a do řetězce zapsaném pomocí uvozovek můžeme jednoduše vkládat\r\nproměnné:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"37233072477cabb3408c7e6e3685b33127a4fdb8bf7b1a91f1f6d92452ba80fd\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$jmeno</span> = <span class=\"php-quote\">\'Karel\'</span>;\r\n<span class=\"php-var\">$text</span> = <span class=\"php-quote\">\"Jmenuji se </span><span class=\"php-var\">$jmeno</span><span class=\"php-quote\"> \\nS tímto jménem jsem spokojen.\"</span>;\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$text</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$jmeno = \'Karel\';\r\n$text = \"Jmenuji se $jmeno \\nS tímto jménem jsem spokojen.\";\r\necho($text);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup bude následující:</p>\r\n\r\n<pre class=\"\">Jmenuji se Karel\r\nS tímto jménem jsem spokojen.</pre>\r\n\r\n<p>Do textu se vložila hodnota proměnné $jmeno. Také vidíte, že se\r\nnevypsala sekvence \\n. To z toho důvodu, že pomocí lomítka se v uvozovkách\r\nzapisují speciální znaky. Z těch základních je \\n odřádkování a \\t\r\ntabulátor. V HTML se odřádkování neprojeví, ale když se podíváte do\r\nzdrojového kódu vygenerované stránky, tak ho tam uvidíte.</p>\r\n\r\n<p>Zpracování uvozovek je samozřejmě z důvodu zpracování proměnných o\r\nněco pomalejší, ale vaše aplikace to nijak neovlivní. Můžete si tedy\r\npoužívat tu variantu, která vám vyhovuje. Dvojité uvozovky se určitě\r\nnehodí na výpis HTML. Lze v nich totiž psát apostrofy, ale uvozovky se musí\r\nescapovat:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"80da767dd03cce05fe21590cebaea952496b2a1ab117bcd8cd69ce05ed81716d\"><div class=\"sjs sjs-tab-control\" style=\"height: 48px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"PHP se učím z tutoriálů na &lt;a href=\\\"http://www.itnetwork.cz\\\"&gt;ITnetwork&lt;/a&gt;.\"</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\necho(\"PHP se učím z tutoriálů na &lt;a href=\\\"http://www.itnetwork.cz\\\"&gt;ITnetwork&lt;/a&gt;.\");\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Varianta výše je velmi nepřehledná. Osobně používám skoro pořád\r\napostrofy a proměnné vkládám pomocí konkatenace (tečky). Přijde mi to\r\npřehlednější.</p>\r\n\r\n<p>Ještě pro úplnost dodám, že pokud byste někdy potřebovali vypsat\r\nzpětné lomítko v uvozovkách, musíte zapsat dvě za sebou, jinak to bude PHP\r\nbrát jako že něco escapujete.</p>\r\n\r\n<h2>Pole</h2>\r\n\r\n<p>Představte si, že ve svém programu potřebujete uložit více proměnných\r\nstejného typu. Např. česká jména měsíců, 10 známek ze školy, platy 100\r\nuživatelů nebo databázi tisíců firem. Asi tušíte, že bude nějaká\r\nlepší cesta, než začít zběsile bušit proměnné znamka1, znamka2,\r\nznamka3... A co kdyby se program rozšířil a známek by bylo tisíc? A jak by\r\nse potom počítal průměr z těchto známek?</p>\r\n\r\n<p>Pro uložení více proměnných stejného typu nám PHP nabízí datovou\r\nstrukturu, které se říká pole. V PHP jsou 2 typy polí. Dnes si popíšeme\r\nprvní z nich.</p>\r\n\r\n<h3>Číselně indexovaná pole</h3>\r\n\r\n<p>Číselně indexované pole si můžeme představit jako řadu přihrádek\r\nněkde v paměti počítače (ono mimochodem vnitřně opravdu tak vypadá).\r\nPřihrádky jsou číslované vždy od nuly a jejich číslům se říká\r\nindexy. V programování víceméně vše začíná od nuly, ne nadarmo se\r\nříká, že první dítě programátora je nulté. Přihrádek můžeme mít kolik\r\nchceme a můžeme si do nich uložit hodnoty libovolného typu a to dokonce i\r\ntak, že bude v jedné přihrádce třeba číslo a v druhé text. V praxi by to\r\novšem nemělo valný smysl.</p>\r\n\r\n<p>Zkusme si něco podobného naprogramovat, udělejme si zmíněné pole\r\nznámek. Známky opět napíšeme pevně do skriptu, jelikož ještě neumíme\r\nformuláře. To napravíme hned v příští lekci.\r\n\r\n<p>Pole si uložíme do klasické proměnné. Pojmenujeme ji tak, co v ní je a\r\nv množném čísle, tedy v našem případě $znamky. Pro samotnou definici\r\npole používáme klíčové slovo array().</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$znamky</span> = <span class=\"php-keyword1\">array</span>();</pre>\r\n\r\n<p>Nyní je v proměnné $znamky prázdné pole. Pokud používáte PHP 5.4 nebo\r\nnovější, můžete pole zapsat i takto:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$znamky</span> = [];</pre>\r\n\r\n<p>Tento zápis je kratší a obecně lepší, ale já se budu držet starší\r\ndefinice, jelikož někteří čtenáři mohou používat starší\r\nwebhostingy.</p>\r\n\r\n<h4>Vkládání prvků do pole</h4>\r\n\r\n<p>Nyní do pole přidejme několik známek. Jak je zvykem, můžeme to udělat\r\nněkolika způsoby.</p>\r\n\r\n<p>Nový prvek na konec pole přidáme takto:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">1</span>;\r\n<span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">2</span>;\r\n<span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">5</span>;</pre>\r\n\r\n<p>Výsledné pole tedy vypadá takto:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-num\">1</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">5</span></pre>\r\n\r\n<p>Funkce echo() nám pole moc dobře nevypíše, ale můžeme si ho nechat\r\nvypsat pomocí funkce print_r():</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"bba30fa63b4ce60beb75ecfa4155111490721276a321521cad4b9fb163f0f4b6\"><div class=\"sjs sjs-tab-control\" style=\"height: 31px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"hidden\">\r\n<span class=\"php-var\">$znamky</span> = [];\r\n<span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">1</span>;\r\n<span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">2</span>;\r\n<span class=\"php-var\">$znamky</span>[] = <span class=\"php-num\">5</span>;\r\n\r\n</span><span class=\"php-keyword2\">print_r</span>(<span class=\"php-var\">$znamky</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n\r\n$znamky = [];\r\n$znamky[] = 1;\r\n$znamky[] = 2;\r\n$znamky[] = 5;\r\n\r\nprint_r($znamky);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Stejně tak můžeme vložit prvek na konkrétní index v poli. Pokud prvek\r\nna tomto indexu už je, prostě se přepíše.</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$znamky</span>[<span class=\"php-num\">0</span>] = <span class=\"php-num\">1</span>;\r\n<span class=\"php-var\">$znamky</span>[<span class=\"php-num\">1</span>] = <span class=\"php-num\">3</span>;\r\n<span class=\"php-var\">$znamky</span>[<span class=\"php-num\">2</span>] = <span class=\"php-num\">5</span>;\r\n<span class=\"php-var\">$znamky</span>[<span class=\"php-num\">1</span>] = <span class=\"php-num\">2</span>; <span class=\"php-comment\">// Přepíše prvek na indexu 1 (3) na dvojku</span></pre>\r\n\r\n<p>Poslední řádek vloží na index 1 prvek 2, tím přepíše hodnotu 3,\r\nkterá se na tento index již vložila na druhém řádku. Nemá to zde\r\nsamozřejmě žádný smysl, jen ten, že si to vyzkoušíme. To za dvěma lomítky je tzv.\r\nkomentář. PHP si těchto textů nevšímá a slouží pro lepší orientaci\r\nprogramátorů v kódu. Určitě je dobrý nápad komentáře používat. Dají\r\nse zapsat i na více řádků a to takto:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-comment\">/*\r\n Tento text PHP ignoruje a platí\r\n až do ukončení komentáře. Můžeme si tak popsat\r\n složitější části programu, abychom nezapomněli\r\n jak jsme to mysleli, až ke kódu přijdeme za pár měsíců :)\r\n*/</span></pre>\r\n\r\n<p>Pokud známky předem víme, můžeme pole vytvořit rovnou se zadáním jeho\r\nobsahu:</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$znamky</span> = <span class=\"php-keyword1\">array</span>(<span class=\"php-num\">1</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">4</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">1</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">5</span>);</pre>\r\n\r\n<h4>Čtení hodnot z pole</h4>\r\n\r\n<p>Pokud z pole potřebujeme načíst nějakou hodnotu, uděláme to pomocí\r\nindexu:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"2bd399fdca3e69ffe786083b10d68c53a11549edf8af8e41d617dfab7df8ab42\"><div class=\"sjs sjs-tab-control\" style=\"height: 31px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"hidden\">\r\n<span class=\"php-var\">$znamky</span> = <span class=\"php-keyword1\">array</span>(<span class=\"php-num\">1</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">4</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">1</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">5</span>);\r\n\r\n</span><span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Třetí známka v poli je \'</span> . <span class=\"php-var\">$znamky</span>[<span class=\"php-num\">2</span>]);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n\r\n$znamky = array(1, 2, 3, 4, 2, 2, 1, 3, 2, 5);\r\n\r\necho(\'Třetí známka v poli je \' . $znamky[2]);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Třetí známka v poli je 3\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<h2>Praktické ukázky použití polí</h2>\r\n\r\n<p>PHP nám nabízí pro práci s poli spoustu funkcí. I když si je popíšeme\r\naž v dalších dílech, udělejme si jen takové dvě malé ochutnávky.</p>\r\n\r\n<h3>Průměr známek</h3>\r\n\r\n<p>Pomocí funkcí array_sum() (součet) a count() (počet) spočítáme\r\nprůměr zadaných známek:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"9da4d9eda4ceed1a4cd5619933281fe4ae1fb84d2b3e449c44c8e3e3a0673d98\"><div class=\"sjs sjs-tab-control\" style=\"height: 65px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$znamky</span> = <span class=\"php-keyword1\">array</span>(<span class=\"php-num\">1</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">4</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">1</span>, <span class=\"php-num\">3</span>, <span class=\"php-num\">2</span>, <span class=\"php-num\">5</span>);\r\n<span class=\"php-var\">$prumer</span> = <span class=\"php-keyword2\">array_sum</span>(<span class=\"php-var\">$znamky</span>) / <span class=\"php-keyword2\">count</span>(<span class=\"php-var\">$znamky</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Můj průměr je: \'</span> . <span class=\"php-var\">$prumer</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$znamky = array(1, 2, 3, 4, 2, 2, 1, 3, 2, 5);\r\n$prumer = array_sum($znamky) / count($znamky);\r\necho(\'Můj průměr je: \' . $prumer);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup programu:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Můj průměr je: 2.5\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Asi si dokážete představit, jak špatně by byl program čitelný,\r\nkdybychom pole neznali a psali $soucet = $znamka1 + $znamka2 + $znamka3... Nyní\r\njsme jen jednoduše vydělili součet prvků v poli jejich počtem.</p>\r\n\r\n<h3>České datum</h3>\r\n\r\n<p>Jak již bylo řečeno, do pole si můžeme uložit prakticky cokoli, třeba\r\nnázvy měsíců. Můžeme potom vypsat uživateli aktuální datum a to dokonce\r\nčesky:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"921a398888a2536454d0a0ae6032e5b45a80da76d77e90b515f3dd94d9eefef4\"><div class=\"sjs sjs-tab-control\" style=\"height: 150px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$mesice</span> = <span class=\"php-keyword1\">array</span>(<span class=\"php-quote\">\'leden\'</span>, <span class=\"php-quote\">\'únor\'</span>, <span class=\"php-quote\">\'březen\'</span>, <span class=\"php-quote\">\'duben\'</span>, <span class=\"php-quote\">\'květen\'</span>, <span class=\"php-quote\">\'červen\'</span>,\r\n    <span class=\"php-quote\">\'červenec\'</span>, <span class=\"php-quote\">\'srpen\'</span>, <span class=\"php-quote\">\'září\'</span>, <span class=\"php-quote\">\'říjen\'</span>, <span class=\"php-quote\">\'listopad\'</span>, <span class=\"php-quote\">\'prosinec\'</span>);\r\n<span class=\"php-var\">$den</span> = <span class=\"php-keyword2\">date</span>(<span class=\"php-quote\">\'j\'</span>);\r\n<span class=\"php-var\">$mesic</span> = <span class=\"php-keyword2\">date</span>(<span class=\"php-quote\">\'m\'</span>);\r\n<span class=\"php-var\">$mesicSlovy</span> = <span class=\"php-var\">$mesice</span>[<span class=\"php-var\">$mesic</span> - <span class=\"php-num\">1</span>];\r\n<span class=\"php-var\">$rok</span> = <span class=\"php-keyword2\">date</span>(<span class=\"php-quote\">\'Y\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Ahoj, dnes je </span><span class=\"php-var\">$den</span><span class=\"php-quote\">. </span><span class=\"php-var\">$mesicSlovy</span><span class=\"php-quote\"> </span><span class=\"php-var\">$rok</span><span class=\"php-quote\">\"</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$mesice = array(\'leden\', \'únor\', \'březen\', \'duben\', \'květen\', \'červen\',\r\n    \'červenec\', \'srpen\', \'září\', \'říjen\', \'listopad\', \'prosinec\');\r\n$den = date(\'j\');\r\n$mesic = date(\'m\');\r\n$mesicSlovy = $mesice[$mesic - 1];\r\n$rok = date(\'Y\');\r\necho(\"Ahoj, dnes je $den. $mesicSlovy $rok\");\r\n{/PHP}</pre></div></div>\r\n\r\n<p>V programu vytvoříme pole názvů měsíců. Dále si pomocí funkce date()\r\nzjistíme číslo dne, měsíce a roku. Do proměnné $mesicSlovy si budeme\r\nchtít uložit aktuální měsíc z pole. Když je říjen (měsíc 10), máme v\r\nproměnné $mesic hodnotu 10. Prvek v poli s hodnotou \"říjen\" má však index\r\n9, jelikož jsou číslované od nuly. Proto sáhneme na přihrádku s indexem\r\n$mesic - 1. Nakonec jen jednoduše vypíšeme obsah proměnných. Ko\n	<ifrmpletní\r\npráci s datem a časem se také naučíme později.</p>\r\n\r\n<p>Výstup:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\rame srcdoc=\"Ahoj, dnes je 2. říjen 2016\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>'),
(4, 'Lekce 4 - Asociativní pole v PHP a obsluha formulářů', 'photo2.png', 'V tutoriálu rozšíříme naše znalostí PHP o asociativní pole. Na kalkulačce si vysvětlíme metody GET a POST, kterými můžeme zpracovávat data od uživatele.', '<p>V minulé lekci jsme se naučili zadávat textové řetězce\r\nrůznými způsoby a uvedli jsme si pole. Dnes si v PHP tutoriálu rozšíříme\r\nznalosti ohledně polí a hned je prakticky využijeme k vytvoření webové\r\nkalkulačky. Ano, konečně budeme reagovat na nějaký vstup od uživatele.</p>\r\n\r\n<h2>Asociativní pole</h2>\r\n\r\n<p>Druhý typ polí v PHP je tzv. pole asociativní. Funguje úplně stejně,\r\njako číselně indexované, ale indexy již nejsou čísla, ale textové\r\nřetězce. <strong>Indexům v tomto typu polí říkáme klíče</strong>.</p>\r\n\r\n<p>Asociativní pole definujeme podobně jako číselně indexované, jen kromě\r\nhodnot zadáváme i klíče. K tomu používáme operátor dvojité šipky\r\n(=&gt;):</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$oblibeneVeci</span> = <span class=\"php-keyword1\">array</span>(\r\n        <span class=\"php-quote\">\'homer\'</span> =&gt; <span class=\"php-quote\">\'kobliha\'</span>,\r\n        <span class=\"php-quote\">\'marge\'</span> =&gt; <span class=\"php-quote\">\'trouba\'</span>,\r\n        <span class=\"php-quote\">\'bart\'</span> =&gt; <span class=\"php-quote\">\'prak\'</span>,\r\n        <span class=\"php-quote\">\'liza\'</span> =&gt; <span class=\"php-quote\">\'kniha\'</span>,\r\n        <span class=\"php-quote\">\'meggie\'</span> =&gt; <span class=\"php-quote\">\'dudlík\'</span>,\r\n);</pre>\r\n\r\n<p>Zápis pole jsme rozdělili kvůli přehlednosti do více řádků, ale šlo\r\nby to i v jednom. V poli máme 5 hodnot: \'kobliha\', \'trouba\', \'prak\', \'kniha\',\r\n\'dudlík\'. Každá hodnota patří nějakému klíči (\'homer\', \'marge\', \'bart\',\r\n\'liza\', \'meggie\'). Hodnoty přiřadíme ke klíči pomocí šipky a oddělujeme\r\nčárkou, která se většinou píše i za poslední položkou. Nezapomenete ji\r\ntak napsat až do pole budete přidávat další prvek.</p>\r\n\r\n<p>Mimochodem, všimněte si, že pokud vytváříme proměnnou, jejíž název\r\nzahrnuje více slov, použijeme tzv. velbloudí notaci. První písmeno malé a\r\nkaždé počáteční písmeno dalšího slova velké. Lidé v PHP píší\r\nrůzně, ale tato konvence je bezesporu nejlepší.</p>\r\n\r\n<p>Pro práci s asociativním polem platí to samé, jako jsme si ukazovali\r\nminule u pole číselně indexovaného:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"e77a64519e69ddf1617c1a58f6a2b9dd6fa87cb16fbd4524f75a7e74e46e6f1a\"><div class=\"sjs sjs-tab-control\" style=\"height: 48px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"hidden\">\r\n<span class=\"php-var\">$oblibeneVeci</span> = <span class=\"php-keyword1\">array</span>(\r\n        <span class=\"php-quote\">\'homer\'</span> =&gt; <span class=\"php-quote\">\'kobliha\'</span>,\r\n        <span class=\"php-quote\">\'marge\'</span> =&gt; <span class=\"php-quote\">\'trouba\'</span>,\r\n        <span class=\"php-quote\">\'bart\'</span> =&gt; <span class=\"php-quote\">\'prak\'</span>,\r\n        <span class=\"php-quote\">\'liza\'</span> =&gt; <span class=\"php-quote\">\'kniha\'</span>,\r\n        <span class=\"php-quote\">\'meggie\'</span> =&gt; <span class=\"php-quote\">\'dudlík\'</span>,\r\n);\r\n\r\n</span><span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Homer má rád: \'</span> . <span class=\"php-var\">$oblibeneVeci</span>[<span class=\"php-quote\">\'homer\'</span>]);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n\r\n$oblibeneVeci = array(\r\n        \'homer\' =&gt; \'kobliha\',\r\n        \'marge\' =&gt; \'trouba\',\r\n        \'bart\' =&gt; \'prak\',\r\n        \'liza\' =&gt; \'kniha\',\r\n        \'meggie\' =&gt; \'dudlík\',\r\n);\r\n\r\necho(\'Homer má rád: \' . $oblibeneVeci[\'homer\']);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Místo abychom napsali $oblibeneVeci[0], použijeme textový klíč.\r\nObrovskou výhodou je přehlednost. Vidíme, co z pole vytahujeme, na rozdíl od\r\nčíselného indexu, který nám mnohdy nic neříká.</p>\r\n\r\n<p>Každé číselně indexované pole lze zapsat jako pole asociativní a to\r\ntakto:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"73bde4076871d89e6f540a48b719ccf43834cb5600b50ce8c966f9971c075cb0\"><div class=\"sjs sjs-tab-control\" style=\"height: 201px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$batoh</span> = <span class=\"php-keyword1\">array</span>(<span class=\"php-quote\">\'provaz\'</span>, <span class=\"php-quote\">\'svítilna\'</span>, <span class=\"php-quote\">\'peněženka\'</span>);\r\n\r\n<span class=\"php-var\">$batoh2</span> = <span class=\"php-keyword1\">array</span>(\r\n        <span class=\"php-num\">0</span> =&gt; <span class=\"php-quote\">\'provaz\'</span>,\r\n        <span class=\"php-num\">1</span> =&gt; <span class=\"php-quote\">\'svítilna\'</span>,\r\n        <span class=\"php-num\">2</span> =&gt; <span class=\"php-quote\">\'peněženka\'</span>,\r\n);\r\n\r\n<span class=\"php-keyword2\">print_r</span>(<span class=\"php-var\">$batoh</span>);\r\n<span class=\"php-keyword2\">print_r</span>(<span class=\"php-var\">$batoh2</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$batoh = array(\'provaz\', \'svítilna\', \'peněženka\');\r\n\r\n$batoh2 = array(\r\n        0 =&gt; \'provaz\',\r\n        1 =&gt; \'svítilna\',\r\n        2 =&gt; \'peněženka\',\r\n);\r\n\r\nprint_r($batoh);\r\nprint_r($batoh2);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Z výpisu vidíme, že pole $batoh a $batoh2 jsou naprosto stejná. PHP\r\ntotiž vnitřně zná jen pole asociativní a když založíme číselně\r\nindexované, jednoduše vytvoří indexy podle pořadí položek.</p>\r\n\r\n<p><em>Pozn.: Ve většině jazyků je pole omezené svou velikostí a když se\r\njednou vytvoří, nelze do něj prvky přidávat. V PHP tomu tak není, s polem\r\nsi můžete dělat úplně co chcete.</em></p>\r\n\r\n<h2>Zpracování formulářů v PHP</h2>\r\n\r\n<p>Konečně se dostáváme k něčemu zajímavému. Pravé aplikace přeci\r\nreagují na vstup od uživatele. Zkusme si takovou aplikaci vytvořit -\r\nnaprogramujeme si jednoduchou webovou kalkulačku.</p>\r\n\r\n<p>Webové aplikaci lze předat vstup pomocí dvou metod - GET a POST. HTTP\r\nprotokol zná ještě několik dalších metod (REST), ale prohlížeče je\r\nnepodporují. Data dorazí do PHP skriptu vždy v asociativním poli, které se\r\njmenuje podle metody, kterou přišla.</p>\r\n\r\n<p>Vytvořme si nějakou složku pro novou aplikaci (třeba kalkulacka).</p>\r\n\r\n<h3>Metoda GET</h3>\r\n\r\n<p>Vytvořte si soubor kalkulacka.php. Pokud budeme tomuto skriptu chtít\r\npředat nějaká data metodou GET, zadáme je do URL adresy pomocí tzv. query\r\nstringu. Query string začíná otazníkem (?) a jednotlivé parametry jsou\r\noddělené ampersandy (&amp;). Mezi názvem parametru a jeho hodnotou je rovná\r\nse (=).</p>\r\n\r\n<p>Do URL adresy bychom tedy zadali toto:</p>\r\n\r\n<pre class=\"\">localhost/kalkulacka/kalkulacka.php?cislo1=10&amp;cislo2=20</pre>\r\n\r\n<p>Skriptu předáváme metodou GET dvě proměnné. První se jmenuje cislo1 a\r\nmá hodnotu 10, cislo2 má hodnotu 20.</p>\r\n\r\n<p>Obsah skriptu by mohl být následující:</p>\r\n\r\n<pre class=\"html\"><span class=\"html-tag\">&lt;!DOCTYPE</span><span class=\"html-tagin\"> html</span><span class=\"html-tag\">&gt;</span>\r\n<span class=\"html-tag\">&lt;html&gt;</span>\r\n    <span class=\"html-tag\">&lt;head&gt;</span>\r\n        <span class=\"html-tag\">&lt;meta</span><span class=\"html-tagin\"> http-equiv=</span><span class=\"html-quote\">\"Content-Type\"</span><span class=\"html-tagin\"> content=</span><span class=\"html-quote\">\"text/html; charset=UTF-8\"</span><span class=\"html-tag\">&gt;</span>\r\n        <span class=\"html-tag\">&lt;title&gt;</span>Kalkulačka<span class=\"html-tag\">&lt;/title&gt;</span>\r\n    <span class=\"html-tag\">&lt;/head&gt;</span>\r\n    <span class=\"html-tag\">&lt;body&gt;</span>\r\n        <span class=\"xlang\">&lt;?php</span>\r\n            <span class=\"php-var\">$soucet</span> = <span class=\"php-var\">$_GET</span>[<span class=\"php-quote\">\'cislo1\'</span>] + <span class=\"php-var\">$_GET</span>[<span class=\"php-quote\">\'cislo2\'</span>];\r\n            <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Součet: </span><span class=\"php-var\">$soucet</span><span class=\"php-quote\">\"</span>);\r\n        <span class=\"xlang\">?&gt;</span>\r\n    <span class=\"html-tag\">&lt;/body&gt;</span>\r\n<span class=\"html-tag\">&lt;/html&gt;</span></pre>\r\n\r\n<p>Skript pracuje s tzv. <strong>superglobálním polem $_GET</strong>.\r\nSuperglobálním proto, že je přístupné odkudkoli. Všechny proměnné,\r\nkteré byly skriptu odeslány v query stringu, nalezneme v tomto poli. Pole je\r\nasociativní, jako klíč zadáme název proměnné a dostaneme její hodnotu.\r\nSoučet hodnot jednoduše vypíšeme.</p>\r\n\r\n<p>Výsledek:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Kalkulačka</div>\r\n\r\n	<div class=\"browser-url\">localhost/kal&shy;kulacka/kalku&shy;lacka.php?cis&shy;lo1=10&amp;cislo2=20</div>\r\n\r\n	<iframe srcdoc=\"Součet: 30\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<p>Metoda GET slouží spíše pro získávání podstránek webu a pro\r\nkalkulačku se příliš nehodí.</p>\r\n\r\n<h3>Metoda POST</h3>\r\n\r\n<p>Metoda POST se obvykle používá pro odesílání formulářů. Naše\r\naplikace se bude nyní skládat ze dvou souborů. V prvním bude formulář, kam\r\nuživatel zadá 2 čísla do textových polí a odešle tlačítkem\r\n\"vypočítej\". Data se odešlou druhému souboru, což bude PHP skript, který\r\nprovede výpočet.</p>\r\n\r\n<h3>kalkulacka.html</h3>\r\n\r\n<p>Soubor obsahuje formulář. Můžeme mu dát koncovku PHP, ale není to\r\nnutné, žádné PHP bloky zde nejsou. Pokud soubor pojmenujete index, zobrazí\r\nse samozřejmě jako výchozí stránka, když do složky kalkulacka\r\npřistoupíte. Soubor bude vypadat asi takto:</p>\r\n\r\n<pre class=\"html\"><span class=\"html-tag\">&lt;!DOCTYPE</span><span class=\"html-tagin\"> html</span><span class=\"html-tag\">&gt;</span>\r\n<span class=\"html-tag\">&lt;html&gt;</span>\r\n    <span class=\"html-tag\">&lt;head&gt;</span>\r\n        <span class=\"html-tag\">&lt;meta</span><span class=\"html-tagin\"> http-equiv=</span><span class=\"html-quote\">\"Content-Type\"</span><span class=\"html-tagin\"> content=</span><span class=\"html-quote\">\"text/html; charset=UTF-8\"</span><span class=\"html-tag\">&gt;</span>\r\n        <span class=\"html-tag\">&lt;title&gt;</span>Kalkulačka<span class=\"html-tag\">&lt;/title&gt;</span>\r\n    <span class=\"html-tag\">&lt;/head&gt;</span>\r\n    <span class=\"html-tag\">&lt;body&gt;</span>\r\n        <span class=\"html-tag\">&lt;p&gt;</span>Vítejte v kalkulačce, zadejte 2 čísla a získejte jejich součet.<span class=\"html-tag\">&lt;/p&gt;</span>\r\n\r\n        <span class=\"html-tag\">&lt;form</span><span class=\"html-tagin\"> method=</span><span class=\"html-quote\">\"POST\"</span><span class=\"html-tagin\"> action=</span><span class=\"html-quote\">\"soucet.php\"</span><span class=\"html-tag\">&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> name=</span><span class=\"html-quote\">\"cislo1\"</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"text\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;&lt;br</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> name=</span><span class=\"html-quote\">\"cislo2\"</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"text\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;&lt;br</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"submit\"</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"Sečti\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n        <span class=\"html-tag\">&lt;/form&gt;</span>\r\n\r\n    <span class=\"html-tag\">&lt;/body&gt;</span>\r\n<span class=\"html-tag\">&lt;/html&gt;</span></pre>\r\n\r\n<p>Na HTML stránce máme formulář a v něm pár vstupních textových polí\r\ntypu text. Pokud ctíte HTML 5, můžete použít jako typ polí ve formuláři\r\n\"number\". Poslední pole je odesílací tlačítko, které vyvolá odeslání\r\nformuláře.</p>\r\n\r\n<p>Zajímavější jsou atributy formuláře. Method=\"POST\" udává způsob,\r\njakým se data z formuláře odešlou. Ačkoli POST není výchozí hodnota,\r\nnedává pro formuláře příliš smysl používat žádnou jinou. Pokud bychom\r\natribut neuvedli, použila by se metoda GET, kde by formulář odeslal data jako\r\nquery string do URL adresy. Tak by byly jednak vidět a také je délka adresy\r\nomezená. Používejte tedy vždy POST. Action označuje skript, který\r\nformulář zpracuje. Pokud atribut neuvedeme, odešle se formulář do toho\r\nsamého souboru, ve kterém se nachází.</p>\r\n\r\n<h3>soucet.php</h3>\r\n\r\n<p>Soubor je skript s obslužným kódem, kterému se data z formuláře\r\nodešlou a on je zpracuje. Asi vás nepřekvapí, že data z formuláře\r\npřijdou v <strong>superglobálním poli $_POST</strong>. Opět je asociativní\r\na klíčem jsou názvy textových (nebo jiných) polí, tedy jejich atributy\r\nname.</p>\r\n\r\n<p>Obsah skriptu bude následující:</p>\r\n\r\n<pre class=\"html\"><span class=\"html-tag\">&lt;!DOCTYPE</span><span class=\"html-tagin\"> html</span><span class=\"html-tag\">&gt;</span>\r\n<span class=\"html-tag\">&lt;html&gt;</span>\r\n    <span class=\"html-tag\">&lt;head&gt;</span>\r\n        <span class=\"html-tag\">&lt;meta</span><span class=\"html-tagin\"> http-equiv=</span><span class=\"html-quote\">\"Content-Type\"</span><span class=\"html-tagin\"> content=</span><span class=\"html-quote\">\"text/html; charset=UTF-8\"</span><span class=\"html-tag\">&gt;</span>\r\n        <span class=\"html-tag\">&lt;title&gt;</span>Kalkulačka<span class=\"html-tag\">&lt;/title&gt;</span>\r\n    <span class=\"html-tag\">&lt;/head&gt;</span>\r\n    <span class=\"html-tag\">&lt;body&gt;</span>\r\n        <span class=\"xlang\">&lt;?php</span>\r\n            <span class=\"php-var\">$soucet</span> = <span class=\"php-var\">$_POST</span>[<span class=\"php-quote\">\'cislo1\'</span>] + <span class=\"php-var\">$_POST</span>[<span class=\"php-quote\">\'cislo2\'</span>];\r\n            <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Součet: </span><span class=\"php-var\">$soucet</span><span class=\"php-quote\">\"</span>);\r\n        <span class=\"xlang\">?&gt;</span>\r\n    <span class=\"html-tag\">&lt;/body&gt;</span>\r\n<span class=\"html-tag\">&lt;/html&gt;</span></pre>\r\n\r\n<p>Oproti obslužnému skriptu pro metodu GET se vlastně vůbec nezměnil.\r\nMůžete si vyzkoušet, že kalkulačka opravdu počítá.</p>');
INSERT INTO `article` (`id`, `title`, `photo`, `perex`, `text`) VALUES
(5, 'Lekce 5 - Podmínky v PHP', 'photo2.png', 'V tutoriálu si představíme základy práce s podmínkami (větvením) v PHP, jsou to příkazy if a else. Rozšíříme naši kalkulačku o nové funkce.', '<p>V minulé lekci jsme si ukázali jak fungují formuláře a\r\nvytvořili si jednoduchou kalkulačku. Ta uměla jen sčítat. V dnešním PHP\r\ntutoriálu ji rozšíříme o další funkce. Budeme k tomu potřebovat\r\npodmínky.</p>\r\n\r\n<h2>Podmínky</h2>\r\n\r\n<p>Podmínky (nebo-li programátorsky větvení) umožňují, aby se skript\r\nnechoval stále stejně, ale reagoval na různé situace. Nejčastěji reagujeme\r\nna vstup od uživatele nebo různé události (např. že požadovaný článek\r\nneexistuje).</p>\r\n\r\n<p>Pokud jste již programovali v nějakém céčkovém jazyce, budete se nyní\r\nasi chvilku nudit.</p>\r\n\r\n<p>Podmínku zapíšeme pomocí klíčového slova <strong>if</strong>, za\r\nkterým následuje v závorce logický výraz. Pokud je výraz pravdivý,\r\nvykoná se následující příkaz. Pokud ne, následující příkaz vykonán\r\nnebude a program pokračuje až pod ním.</p>\r\n\r\n<p>Zkusme si to:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"e3b01f0200d7fda14de8175bbd4c70104a13b9b3c20b721c57c225ebd877681e\"><div class=\"sjs sjs-tab-control\" style=\"height: 82px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-keyword1\">if</span> (<span class=\"php-num\">15</span> &gt; <span class=\"php-num\">5</span>)\r\n        <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Pravda\'</span>);\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'&lt;br /&gt;Program zde pokračuje dál.\'</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\nif (15 &gt; 5)\r\n        echo(\'Pravda\');\r\necho(\'&lt;br /&gt;Program zde pokračuje dál.\');\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Výstup programu nyní bude:</p>\r\n\r\n<div class=\"browser-wrapper\">\r\n	<div class=\"browser-title\">Your page</div>\r\n\r\n	<div class=\"browser-url\">localhost</div>\r\n\r\n	<iframe srcdoc=\"Pravda<br />\r\nProgram zde pokračuje dál.\" class=\"browser chrome\" style=\"height: 150px;\"></iframe>\r\n</div>\r\n\r\n<h3>Operátory</h3>\r\n\r\n<p>V podmínce jsme použili operátor &gt; (větší). Ve výrazech můžeme\r\ndále používat tyto relační operátory:</p>\r\n\r\n<table>\r\n	<thead>\r\n		<tr>\r\n			<th>Operátor</th>\r\n\r\n			<th>C-like zápis</th>\r\n		</tr>\r\n	</thead>\r\n\r\n	<tbody>\r\n		<tr>\r\n			<td>Rovnost</td>\r\n\r\n			<td>==</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Je ostře větší</td>\r\n\r\n			<td>&gt;</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Je ostře menší</td>\r\n\r\n			<td>&lt;</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Je větší nebo rovno</td>\r\n\r\n			<td>&gt;=</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Je menší nebo rovno</td>\r\n\r\n			<td>&lt;=</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Nerovnost</td>\r\n\r\n			<td>!=</td>\r\n		</tr>\r\n\r\n		<tr>\r\n			<td>Obecná negace</td>\r\n\r\n			<td>!</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Rovnost zapisujeme dvěma == proto, aby se to nepletlo s běžným\r\npřiřazením do proměnné, které se dělá jen jedním =. Pokud chceme\r\nnějaký výraz znegovat, napíšeme ho do závorky a před něj vykřičník.\r\nKdyž budeme chtít vykonat více než jen jeden příkaz, musíme příkazy\r\nvložit do bloku ze složených závorek. Součástí výrazu samozřejmě mohou\r\nbýt i proměnné.</p>\r\n\r\n<p>Udělejme si další příklad:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"3bb281422274381c83037b6e42663a8689565da1aaa5f1d2528f13c1ce5bfaa9\"><div class=\"sjs sjs-tab-control\" style=\"height: 184px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$b</span> = <span class=\"php-num\">0</span>;\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$b</span> != <span class=\"php-num\">0</span>)\r\n{\r\n        <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> / <span class=\"php-var\">$b</span>;\r\n        <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Podíl: \'</span> . <span class=\"php-var\">$vysledek</span>);\r\n}\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$b</span> == <span class=\"php-num\">0</span>)\r\n        <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Nulou nelze dělit!\'</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 10;\r\n$b = 0;\r\nif ($b != 0)\r\n{\r\n        $vysledek = $a / $b;\r\n        echo(\'Podíl: \' . $vysledek);\r\n}\r\nif ($b == 0)\r\n        echo(\'Nulou nelze dělit!\');\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Skript výše spočítá a vypíše podíl dvou proměnných. Pokud je druhá\r\nproměnná nulová, vypíše chybu, jelikož nulou se samozřejmě dělit nedá.\r\nPokud by proměnné pocházely od uživatele a my bychom je podmínkou\r\nneošetřili, mohl by nám takový uživatel aplikaci i rozbít. S ošetřením\r\nuživatelských vstupů úzce souvisí bezpečnost webových aplikací a během\r\nseriálu uvidíte, jak moc je to důležité.</p>\r\n\r\n<h3>Else</h3>\r\n\r\n<p>Podmínku jsme výše napsali vlastně dvakrát, jednou normálně a jednou\r\nznegovanou. Kdyby byla složitější, mohli bychom v její negaci udělat\r\nchybu. Pokud chceme, aby se něco provedlo v případě, že podmínka platí a\r\nněco jiného v případě, že podmínka neplatí, použijeme klíčové slovo\r\nelse. Do větve else program zaběhne v případě, že podmínka neplatí.</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"553fb1808ad3cdf1c6f47709085c5021b43fcc841451d6fe91f87cad5b4e89b5\"><div class=\"sjs sjs-tab-control\" style=\"height: 184px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">10</span>;\r\n<span class=\"php-var\">$b</span> = <span class=\"php-num\">0</span>;\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$b</span> != <span class=\"php-num\">0</span>)\r\n{\r\n        <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> / <span class=\"php-var\">$b</span>;\r\n        <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Podíl: \'</span> . <span class=\"php-var\">$vysledek</span>);\r\n}\r\n<span class=\"php-keyword1\">else</span>\r\n        <span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\'Nulou nelze dělit!\'</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 10;\r\n$b = 0;\r\nif ($b != 0)\r\n{\r\n        $vysledek = $a / $b;\r\n        echo(\'Podíl: \' . $vysledek);\r\n}\r\nelse\r\n        echo(\'Nulou nelze dělit!\');\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Pokud by ve větvi else bylo více příkazů, opět by musely být obsaženy\r\nv bloku ze složených závorek.</p>\r\n\r\n<p>Else se také využívá v případě, kdy potřebujeme v příkazu\r\nmanipulovat s proměnnou z podmínky a nemůžeme se na ni tedy ptát potom\r\nznovu. Program si sám pamatuje, že se podmínka nesplnila a přejde do sekce\r\nelse. Ukažme si to na příkladu: Mějme číslo $a, kde bude hodnota 0 nebo 1\r\na po nás se bude chtít, abychom hodnotu prohodili (pokud tam je 0, dáme tam\r\n1, pokud 1, dáme tam 0). Naivně bychom mohli kód napsat takto:</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"1c9a9a3429954d430c97e00d890e463f8dd731fa4521807c2757b37db82d1ea6\"><div class=\"sjs sjs-tab-control\" style=\"height: 167px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">0</span>; <span class=\"php-comment\">// do $a si přiřadíme na začátku 0</span>\r\n\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$a</span> == <span class=\"php-num\">0</span>) <span class=\"php-comment\">// pokud je $a 0, dáme do něj jedničku</span>\r\n        <span class=\"php-var\">$a</span> = <span class=\"php-num\">1</span>;\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$a</span> == <span class=\"php-num\">1</span>) <span class=\"php-comment\">// pokud je $a 1, dáme do něj nulu</span>\r\n        <span class=\"php-var\">$a</span> = <span class=\"php-num\">0</span>;\r\n\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$a</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 0; // do $a si přiřadíme na začátku 0\r\n\r\nif ($a == 0) // pokud je $a 0, dáme do něj jedničku\r\n        $a = 1;\r\nif ($a == 1) // pokud je $a 1, dáme do něj nulu\r\n        $a = 0;\r\n\r\necho($a);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Nefunguje to, že? Pojďme si projet, co bude program dělat. Na začátku\r\nmáme v <em>$a</em> nulu, první podmínka se jistě splní a dosadí do\r\n<em>$a</em> jedničku. No ale rázem se splní i ta druhá. Co s tím? Když\r\npodmínky otočíme, budeme mít ten samý problém s jedničkou. Jak z toho\r\nven? Ano, použijeme else.</p>\r\n\r\n<div class=\"compiler-wrapper\"><div class=\"text-center code-buttons-wrapper\"><div class=\"run-code-button-wrapper\" title=\"Spustit kód\"><span class=\"run-code-button\"><span class=\"fa-stack fa-lg\"><i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-play fa-stack-1x fa-inverse\"></i></span> </span></div><div class=\"run-code-button-wrapper edit-source-button hidden-important\" title=\"Upravit zdrojový kód\"><span class=\"run-code-button\"><i class=\"fa fa-reply\"></i> </span></div></div><span class=\"click-to-edit\"><i class=\"fa fa-hand-pointer-o\"></i> </span><div class=\"php sjs sjs-compiler\" data-control=\"compiler\" data-hash=\"d76ad4b4afe9fc88aebcbc9f45dfff2c50d01067579460aac2db4bff3dcf5e16\"><div class=\"sjs sjs-tab-control\" style=\"height: 167px;\"><ul class=\"no-bullets\"><li title=\"index.php\" class=\"active\" data-file-name=\"index.php\"><pre><code title=\"index.php\"><span class=\"hidden\">{PHP}\r\n</span><span class=\"php-var\">$a</span> = <span class=\"php-num\">0</span>; <span class=\"php-comment\">// do $a si přiřadíme na začátku 0</span>\r\n\r\n<span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$a</span> == <span class=\"php-num\">0</span>) <span class=\"php-comment\">// pokud je $a 0, dáme do něj jedničku</span>\r\n        <span class=\"php-var\">$a</span> = <span class=\"php-num\">1</span>;\r\n<span class=\"php-keyword1\">else</span> <span class=\"php-comment\">// pokud je $a 1, dáme do něj nulu</span>\r\n        <span class=\"php-var\">$a</span> = <span class=\"php-num\">0</span>;\r\n\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-var\">$a</span>);\r\n<span class=\"hidden\">{/PHP}</span></code></pre></li><li title=\"Výstup\"><div class=\"compiler-result\"></div></li></ul></div><div class=\"clear\"></div><pre style=\"display: none;\" class=\"original-code\" data-file-name=\"index.php\">{PHP}\r\n$a = 0; // do $a si přiřadíme na začátku 0\r\n\r\nif ($a == 0) // pokud je $a 0, dáme do něj jedničku\r\n        $a = 1;\r\nelse // pokud je $a 1, dáme do něj nulu\r\n        $a = 0;\r\n\r\necho($a);\r\n{/PHP}</pre></div></div>\r\n\r\n<p>Nyní vše funguje tak, jak má. K podmínkám je ještě nějaká teorie,\r\nkterou si dopovíme příště. Nyní pomocí nabytých znalostí rozšiřme\r\nnaši kalkulačku.</p>\r\n\r\n<h2>Rozšíření kalkulačky</h2>\r\n\r\n<p>Začněme HTML formulářem, do kterého přidáme volbu pro zvolení\r\npočetní operace. Přidáme do něj tag select, kterým zvolíme jakou\r\npočetní operaci chceme vykonat. Pro úplnost si uveďme celý HTML soubor:</p>\r\n\r\n<pre class=\"html\"><span class=\"html-tag\">&lt;!DOCTYPE</span><span class=\"html-tagin\"> html</span><span class=\"html-tag\">&gt;</span>\r\n<span class=\"html-tag\">&lt;html&gt;</span>\r\n    <span class=\"html-tag\">&lt;head&gt;</span>\r\n        <span class=\"html-tag\">&lt;meta</span><span class=\"html-tagin\"> http-equiv=</span><span class=\"html-quote\">\"Content-Type\"</span><span class=\"html-tagin\"> content=</span><span class=\"html-quote\">\"text/html; charset=UTF-8\"</span><span class=\"html-tag\">&gt;</span>\r\n        <span class=\"html-tag\">&lt;title&gt;</span>Kalkulačka<span class=\"html-tag\">&lt;/title&gt;</span>\r\n    <span class=\"html-tag\">&lt;/head&gt;</span>\r\n    <span class=\"html-tag\">&lt;body&gt;</span>\r\n        <span class=\"html-tag\">&lt;p&gt;</span>Vítejte v kalkulačce, zadejte 2 čísla a operaci.<span class=\"html-tag\">&lt;/p&gt;</span>\r\n\r\n        <span class=\"html-tag\">&lt;form</span><span class=\"html-tagin\"> method=</span><span class=\"html-quote\">\"POST\"</span><span class=\"html-tagin\"> action=</span><span class=\"html-quote\">\"vypocet.php\"</span><span class=\"html-tag\">&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> name=</span><span class=\"html-quote\">\"cislo1\"</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"text\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;&lt;br</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> name=</span><span class=\"html-quote\">\"cislo2\"</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"text\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;&lt;br</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n            Operace:\r\n            <span class=\"html-tag\">&lt;select</span><span class=\"html-tagin\"> name=</span><span class=\"html-quote\">\"operace\"</span><span class=\"html-tag\">&gt;</span>\r\n                <span class=\"html-tag\">&lt;option</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"scitani\"</span><span class=\"html-tag\">&gt;</span>Sčítání<span class=\"html-tag\">&lt;/option&gt;</span>\r\n                <span class=\"html-tag\">&lt;option</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"odcitani\"</span><span class=\"html-tag\">&gt;</span>Odčítání<span class=\"html-tag\">&lt;/option&gt;</span>\r\n                <span class=\"html-tag\">&lt;option</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"nasobeni\"</span><span class=\"html-tag\">&gt;</span>Násobení<span class=\"html-tag\">&lt;/option&gt;</span>\r\n                <span class=\"html-tag\">&lt;option</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"deleni\"</span><span class=\"html-tag\">&gt;</span>Dělení<span class=\"html-tag\">&lt;/option&gt;</span>\r\n            <span class=\"html-tag\">&lt;/select&gt;&lt;br</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n            <span class=\"html-tag\">&lt;input</span><span class=\"html-tagin\"> type=</span><span class=\"html-quote\">\"submit\"</span><span class=\"html-tagin\"> value=</span><span class=\"html-quote\">\"Vypočítej\"</span><span class=\"html-tagin\"> </span><span class=\"html-tag\">/&gt;</span>\r\n        <span class=\"html-tag\">&lt;/form&gt;</span>\r\n\r\n    <span class=\"html-tag\">&lt;/body&gt;</span>\r\n<span class=\"html-tag\">&lt;/html&gt;</span></pre>\r\n\r\n<p>Až se formulář odešle, budeme mít v $_POST[\'operace\'] hodnotu podle\r\ntoho, jakou možnost uživatel vybral.</p>\r\n\r\n<p>Přejděme do obslužného skriptu, kterým byl dříve soucet.php. Jelikož\r\njiž název neodpovídá tomu, co skript dělá, přejmenoval jsem ho na\r\n<strong>vypocet.php</strong>. Dovnitř dodejme větvení a ochranu před\r\ndělením nulou.</p>\r\n\r\n<p>Nejprve si pro přehlednost na začátku skriptu načtěme vstupy z POSTu do\r\nproměnných. Nemusíme tak stále opisovat $_POST a kód bude\r\npřehlednější.</p>\r\n\r\n<pre class=\"php\"><span class=\"php-var\">$a</span> = <span class=\"php-var\">$_POST</span>[<span class=\"php-quote\">\'cislo1\'</span>];\r\n<span class=\"php-var\">$b</span> = <span class=\"php-var\">$_POST</span>[<span class=\"php-quote\">\'cislo2\'</span>];\r\n<span class=\"php-var\">$operace</span> = <span class=\"php-var\">$_POST</span>[<span class=\"php-quote\">\'operace\'</span>];</pre>\r\n\r\n<p>Dále vložíme větvění na výpočet podle operace. Jelikož je\r\nzbytečné, aby se v ověřování obsahu proměnné operace pokračovalo i v\r\npřípadě, že se nějaká operace provedla, použijeme sekvenci if ... else if\r\n...</p>\r\n\r\n<pre class=\"php\"><span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$operace</span> == <span class=\"php-quote\">\'scitani\'</span>)\r\n        <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> + <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">else</span> <span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$operace</span> == <span class=\"php-quote\">\'odcitani\'</span>)\r\n        <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> - <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">else</span> <span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$operace</span> == <span class=\"php-quote\">\'nasobeni\'</span>)\r\n        <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> * <span class=\"php-var\">$b</span>;\r\n<span class=\"php-keyword1\">else</span> <span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$operace</span> == <span class=\"php-quote\">\'deleni\'</span>)\r\n{\r\n        <span class=\"php-keyword1\">if</span> (<span class=\"php-var\">$b</span> != <span class=\"php-num\">0</span>)\r\n                <span class=\"php-var\">$vysledek</span> = <span class=\"php-var\">$a</span> / <span class=\"php-var\">$b</span>;\r\n        <span class=\"php-keyword1\">else</span>\r\n                <span class=\"php-var\">$vysledek</span> = <span class=\"php-quote\">\'Chyba\'</span>;\r\n}\r\n<span class=\"php-keyword1\">echo</span>(<span class=\"php-quote\">\"Výsledek: </span><span class=\"php-var\">$vysledek</span><span class=\"php-quote\">\"</span>);</pre>\r\n\r\n<p>Kód by měl být jasný. Někdy se můžete setkat s tím, že se else if\r\nspojí do jednoho slova (elseif). Pokud je operace např. sčítání, další\r\nelse se již nevyhodnotí, protože podmínka platila a přejde se rovnou k\r\nvypsání výsledku. Je tedy vždy vykonáno jen tolik podmínek, kolik je\r\npotřeba.</p>');

--
-- Klíče pro exportované tabulky
--

--
-- Klíče pro tabulku `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT pro tabulky
--

--
-- AUTO_INCREMENT pro tabulku `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
